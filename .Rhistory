fit<- lm(y~x)
panel.loess(x,y)
}, xlab="Solar Radiation", ylab="Ozone(ppb"),
main="Solar Radiation")
xyplot(ozone~radiation| temp.cut*wind.cut,data=environmental,  as.table=T,pch=20,
panel=function(x,y,...){
panel.xyplot(x,y,...)
fit<- lm(y~x)
panel.loess(x,y)
}, xlab="Solar Radiation", ylab="Ozone(ppb"),
main="Solar Radiation")
xyplot(ozone~radiation| temp.cut*wind.cut,data=environmental,  as.table=T,pch=20,
panel=function(x,y,...){
panel.xyplot(x,y,...)
fit<- lm(y~x)
panel.loess(x,y)
}, xlab="Solar Radiation", ylab="Ozone(ppb"),
main="Ozone vs Solar Radiation")
xyplot(ozone~radiation| temp.cut*wind.cut,data=environmental,  as.table=T,pch=20,
panel=function(x,y,...){
panel.xyplot(x,y,...)
fit<- lm(y~x)
panel.loess(x,y)
}, xlab="Solar Radiation", ylab="Ozone(ppb)",
main="Ozone vs Solar Radiation" )
splom(~envoronmental)
splom(~environmental)
histogram(~temperature, data=environmental)
histogram(~ozone | wind.cut, data=environmental)
histogram(~ozone | temp.cut*wind.cut, data=environmental)
colrs()
colors()
heat.colors()
colors()
pal<- colorRampPallette(c("red", "yellow", "blue"))
pal<- colorRampPalette(c("red", "yellow", "blue"))
plot(rnorm(100), col=pal(100))
plot(rnorm(100), col=pal(10))
plot(rnorm(100), col=pal(1))
plot(rnorm(100), col=pal(10))
plot(rnorm(100), col=pal(100))
x<- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-03"))
datestring<- x("January 10, 2912 10:40", "December 9 ,2011")
datestring<- c("January 10, 2912 10:40", "December 9 ,2011")
x<- strtime(datestring, "%B %d %Y %H:%M" )
x<- strptime(datestring, "%B %d %Y %H:%M" )
x
datestring<- c("January 10, 2012 10:40", "December 9,2011 9:00")
x<- strptime(datestring, "%B %d %Y %H:%M" )
x
x<- strptime(datestring, "%B %d, %Y %H:%M" )
x
class(x)
>posixt
>?posixt
posixt?
POSIXt?
?POSIXt
homicides<- readLines("homicides.txt")
homicides[1]
homicides[1000]
length(grep("conHomicideShooting", homicides))
length(grep("iconHomicideShooting|icon_homicide_shooting", homicides))
length(grep("Cause: shooting", homicides))
length(grep("Cause: [Ss]hooting", homicides))
length(grep("[Ss]hooting", homicides))
i<-(grep("Cause: shooting", homicides))
j<-(grep("[Cc]ause: shooting", homicides))
i<-(grep("[Cc]ause: [Ss]hooting", homicides))
j<-(grep("[Ss]hooting", homicides))
serdiff(i,j)
setdiff(i,j)
setdiff(j,i)
homicides[859]
grep("New", state.name)
grep("New", state.name, value=T)
grepl("New", state.name)
regexpr("<dd>[F|f]ound(.*)</dd>",homicides[1:10])
regexpr("<dd>[F|f]ound(.*?)</dd>",homicides[1:10])
substr?(homicides[1],177,177+33-1)
substr(homicides[1],177,177+33-1)
r<- regexpr("<dd>[F|f]ound(.*?)</dd>",homicides[1:5])
regmatches(homicides[1:5],r)
x<-substr?(homicides[1],177,177+33-1)
x<-substr(homicides[1],177,177+33-1)
x
sub("<dd>[F|f]ound|<</dd>",x)
sub("<dd>[F|f]ound on |</dd>",x)
x
sub("<dd>[F|f]ound on |</dd>","",x)
gsub("<dd>[F|f]ound on |</dd>","",x)
install.package(kernlab)
install.packages(kernlab)
install.packages("kernlab")
library("kernlab")
data(spam)
dim(spam)
set.seed(3435)
trainndicator=rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
traindicator=rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
table(trainindicator)
trainIndicator=rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
set.seed(3435)
trainIndicator=rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
trainSpam= spam[trainIndicator==1,]
testSpam= spam[trainIndicator==0,]
dim(trainSpam)
names(trainSpam)
head(trainSpam)
table(tranSpam$type)
table(trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
library(nlme)
library(lattice)
xyplot(weight~Time|Diet,Bodyweight)
xyplot(weight~Time|Diet,BodyWeight)
Diet
Diet()
nlme$Diet
set.seed(1)
rpois(5,2)
library(kernlab)
data(spam)
dim(spam)
set.seed(3435)
trainIndicator= rbinom(4601,size=1, prob=0.5)
table(trainIndicator)
trainSpam=spam[trainindicator==1,]
trainSpam=spam[trainIndicator==1,]
testSpam=spam[trainIndicator==0,]
dim(trainSpam)
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
plot(log10(trainSpam[,1:4]+1)
plot(log10(trainSpam[,1:4]+1))
plot(log10(trainSpam[,1:4]+1)
)
hCluster= hclust(dist(t(trainSpam[,1:55]+1)))
)
for (i in 1:5){
fileName<- paste0(".data",i,".csv")
print(fileName)
}
numberSons<- 1L
class(numberSons)
numberSons
numberSons<- 1
numberSons
class(numberSons)
qnorm(0.1,0.05,0.1)
?qnorm
pnorm(0.1,0.05,0.1)
p(0.1,0.05,0.1,)
pnorm(0.1,0.05,0.1,)
(pnorm(0.15,0.05,0.1)-pnorm(-0.05,0.05,0.1))
qnorm(0.01,0.05,0.1)
qnorm(0.05,0.05,0.1)
qnorm(0.95,0.05,0.1)
qnorm(0.99,0.05,0.1)
x<- seq(-0.25, 0.35 , length=100)
x
plot(x,pnorm(x,0.05,0.1))
x<- seq(-0.25, 0.35 , length=10)
plot(x,pnorm(x,0.05,0.1))
x<- seq(-0.25, 0.35 , length=50)
plot(x,pnorm(x,0.05,0.1))
plot(x,dnorm(x,0.05,0.1))
plot(x,dnorm(x,0.025,0.0.05))
plot(x,dnorm(x,0.025,0.05))
?plot
plot(x,dnorm(x,0.025,0.05,type="l"))
plot(x,dnorm(x,0.025,0.05,type="1"))
plot(x,dnorm(x,0.025,0.05),type="1"))
plot(x,dnorm(x,0.025,0.05),type="1")
plot(x,dnorm(x,0.025,0.05),type="l")
?plot
plot(x,dnorm(x,0.025,0.05),type="l")
line(x,dnorm(x,0.05,0.1))
lines(x,dnorm(x,0.05,0.1))
line(x,dnorm(x,0.05,0.1),col="blue")
qnorm(0.01,0.04,0.09)
qnorm(0.05,0.04,0.09)
exp(qnorm(0.05,0.04,0.09))-1
exp(qnorm(0.01,0.04,0.09))-1
(41.29-38.23)/38.23
(41.11-41.74)/41.11
log((41.29)/38.23)
log(41.74)/41.11
log(41.74/41.11)
exp(log(41.74/41.11))
(41.39-38.23)/38.23
(0.1)/38.23
7.7*12
exp(log(1.077)*12)
log(1.077)
log(1.077)*12
exp(log(1.077)*12)
8000*1.077+2000*1.015
8000*1.077/8000*1.077+2000*1.015
8000*1.077/(8000*1.077+2000*1.015)
8000*1.08/(8000*1.08+2000*1.015)
8000*1.08+2000*1.015
1-pnorm(0.1,0.05,0.1)
pnorm(-0.1,0.05,0.1)
log(1.08)*12
exp(log(1.08)*12)
(8000*1.08)/(8000*1.08+2000*1.015)
matA=matrix(data=c(1,2,3,4,5,6),nrow=2, ncol=3
)
matA
class(matA)
dim(matA)
xvec <- c(1,2,3)
xvec
class(xvec)
xvec.mat= as.mtrix(xvec)
xvec.mat= as.matrix(xvec)
xvec.mat
t(matA)
t(xvec.mat)
matS<- matrix(c(1,2,2,1), 2,2)
matS
matS== t(matS)
matA<- matrix(c(4,9,2,1) 2,2, byrow=T))
matA<- matrix(c(4,9,2,1), 2,2, byrow=T))
matA<- matrix(c(4,9,2,1), 2,2, byrow=T)
matB<- matrix(c(2,0,0,7), 2,2, byrow=T)
matA
matB
matC<- matA+matB
matC
matC<- matA-matB
matC
0.04+0.09*(-1.645)
exp(0.04+0.09*(-1.645))-1
100000*exp(0.04+0.09*(-1.645))-1
100000*(exp(0.04+0.09*(-1.645))-1)
qlnorm(0.01,0.04,0.09)
pnorm(0.01,0.04,0.09)
pnorm(0.01,0.48,(0.09*sqrt(12))
)
exp(pnorm(0.01,0.48,(0.09*sqrt(12))))-1
exp(qnorm(0.01,0.48,(0.09*sqrt(12))))-1
install.packages(mvtnorm)
library(mvtnorm)
A<- matrix(c(1,2,1,4))
A
A<- matrix(c(1,2,1,4),2)
A
solve(A)
As<- solve(A)
Z<- As%*%(matrix( 1,2))
z
Z
A<- matrix(c(1,2,1,4),2)
As<- solve(A)
A%*%As
As%*%(c(1,2))
diag(3)
x<- matrix(c(1/3,1/3,1/3))
x
sigma<- matrix(c(0.1,0.3,0.1,03,0.15,-0.20,0.1,-0.20,0.08),3)
sigma
sigma<- matrix(c(0.1,0.3,0.1,0.3,0.15,-0.20,0.1,-0.20,0.08),3)
sigma
t(x)%*%sigma%*%x
e<- rnorm(0,0.1)    )
e<- rnorm(0,0.1)
e
e<- rnorm(250,0,0.1)
e
Y
Y<- 0.05+e+0.5e
Y
e
Y<- 0.05+e+0.5e
Y<- 0.05+1.5*(rnorm(250,0,0.1)
)
Y
plot(seq(1:250),Y)
lines(seq(1:250),Y)
Y<- 0.5+1.5*(rnorm(250,0,0.1)
)
plot(seq(1:250),Y)
Y<- 1+1.5*(rnorm(250,0,0.1)
plot(seq(1:250),Y)
Y<- 1+1.5*(rnorm(250,0,0.1))
plot(seq(1:250),Y)
ma1.model = list(ma=0.5); mu = 0;05; set.seed(123)
ma1.sim = mu + arima.sim(model=ma1.model,n=250)
ts.plot(ma1.sim,main="MA(1) Process: mu=1, theta=0.75",
xlab="time",ylab="y(t)“, col=“blue”, lwd=2)
abline(h=0)
ma1.sim = mu + arima.sim(model=ma1.model,n=250)
qq
mal.model
ma1.model = list(ma=0.5); mu = 0;05; set.seed(123)
ma1.sim = mu + arima.sim(model=ma1.model,n=250)
ts.plot(ma1.sim,main="MA(1) Process: mu=1, theta=0.75",
xlab="time",ylab="y(t)“, col=“blue”, lwd=2)
ts.plot(ma1.sim,main="",xlab="time",ylab="y(t)“, col=“blue”, lwd=2)
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12, mean=rep(1,2,1,each=4),sd=0.2)
plot(x,y,col="blue", pch=19,cex=2)
text(x+0.05, labels=as.character(1:12)
)
dataFrame<- data.frame(x=x,y=y)
dist(dataFrame)
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12, mean=rep(1,2,1,each=4),sd=0.2)
plot(x,y,col="blue", pch=19,cex=2)
dataFrame<- data.frame(x=x,y=y)
dist(dataFrame)
set.seed(1234)
par(mar=c(0,0,0,0)
)
x<-rnorm(12, mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12, mean=rep(1,2,1,each=4),sd=0.2)
plot(x,y,col="blue", pch=19,cex=2)
dataFrame<- data.frame(x=x,y=y)
dist(dataFrame)
hClustering< hclust(distxy)
?hclust
hClustering<- hclust(distxy)
distxy<- dist(dataFrame)
hClustering<- hclust(distxy)
plot(hClustering)
myplclust<- function(hclust,lab=hclust$labels,lab.col=rep(1, length(hclust$labels)),hang=0,1,...){
##modification of plclust for [lotiing hclust objects *in color*!
## Copyright EVa KF Chan 2009
## Arguments :
## hclust: hclust object
## lab:     a character vetor of the labels of the leaves of the tree
## lab.col: color for the labels; NA =default device foreground colour
## hang: as in hclust & plclust
## Side Effect :
## A display of hierrchical cluster with coloured leaf labels.
y<- rep( hclust$height, 2)
x<- as.numeric(hclust$merge)
y<- y[which(x<0)]
x<- x[which(x<0)]
x<- abs(x)
y<- y[order(x)]
x<- x[order(x)]
plot(hclust, labels=FALSE, hang=hang,...)
text(x=x, y=y[hclust$order]-(max(hclust$height)*hang),
labels=lab[hclust$order],col=lab.col[hclust$order],srt=90,adj=c(1,0.5),xpd=NA,...)
}
myplclust<- function(hclust,lab=hclust$labels,lab.col=rep(1, length(hclust$labels)),hang=0,1,...){
##modification of plclust for [lotiing hclust objects *in color*!
## Copyright EVa KF Chan 2009
## Arguments :
## hclust: hclust object
## lab:     a character vetor of the labels of the leaves of the tree
## lab.col: color for the labels; NA =default device foreground colour
## hang: as in hclust & plclust
## Side Effect :
## A display of hierrchical cluster with coloured leaf labels.
y<- rep( hclust$height, 2)
x<- as.numeric(hclust$merge)
y<- y[which(x<0)]
x<- x[which(x<0)]
x<- abs(x)
y<- y[order(x)]
x<- x[order(x)]
plot(hclust, labels=FALSE, hang=hang,...)
text(x=x, y=y[hclust$order]-(max(hclust$height)*hang),
labels=lab[hclust$order],col=lab.col[hclust$order],srt=90,adj=c(1,0.5),xpd=NA,...)
}
myplclust<- function(hclust,lab=hclust$labels,lab.col=rep(1, length(hclust$labels)),hang=0.1,...){
##modification of plclust for [lotiing hclust objects *in color*!
## Copyright EVa KF Chan 2009
## Arguments :
## hclust: hclust object
## lab:     a character vetor of the labels of the leaves of the tree
## lab.col: color for the labels; NA =default device foreground colour
## hang: as in hclust & plclust
## Side Effect :
## A display of hierrchical cluster with coloured leaf labels.
y<- rep( hclust$height, 2)
x<- as.numeric(hclust$merge)
y<- y[which(x<0)]
x<- x[which(x<0)]
x<- abs(x)
y<- y[order(x)]
x<- x[order(x)]
plot(hclust, labels=FALSE, hang=hang,...)
text(x=x, y=y[hclust$order]-(max(hclust$height)*hang),
labels=lab[hclust$order],col=lab.col[hclust$order],srt=90,adj=c(1,0.5),xpd=NA,...)
}
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12, mean=rep(1,2,1,each=4),sd=0.2)
plot(x,y,col="blue", pch=19,cex=2)
dataFrame<- data.frame(x=x,y=y)
distxy<- dist(dataFrame)
hClustering<- hclust(distxy)
myclust(hClustering, lab=rep(1:3, each=4), lab.col=rep(1:3,each=1))
myplclust(hClustering, lab=rep(1:3, each=4), lab.col=rep(1:3,each=1))
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12, mean=rep(1,2,1,each=4),sd=0.2)
plot(x,y,col="blue", pch=19,cex=2)
dataFrame<- data.frame(x=x,y=y)
distxy<- dist(dataFrame)
hClustering<- hclust(distxy)
plot(hClustering)
myplclust(hClustering, lab=rep(1:3, each=4), lab.col=rep(1:3,each=4))
getwd()
read.csv("mydata.csv")
dir()
getwd()
install.packages(c("JGR","Deducer","DeducerExtras"))
library(JGR)
JGR()
library(JGR)
JGR()
update.packages(ask='graphics',checkBuilt=TRUE)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(matrixc(c(1.3.5.7)),nrow=4))
makeCacheMatrix(matrixc(c(1,3,5,7)),nrow=4))
makeCacheMatrix(matrix(c(1,3,5,7),nrow=4))
makeCacheMatrix(matrix(c(1,3,5,7),nrow=4),)
makeCacheMatrix(matrix(c(1,3,5,7),nrow=4))
x<- matrix(c(1,2,3,4),nrow=4)
x
x<- matrix(c(1,2,3,4),nrow=2)
x
makeCacheMatrix(x
makeCacheMatrix(x)
makeCacheMatrix
makeCacheMatrix(x)
source('~/.active-rstudio-document')
makeVector(c(2,5,5,7))
zz<-makeVector(c(2,5,5,7))
zz$x
cacheMEan(zz)
cacheMean(zz)
cachemean(zz)
cachemean(makeVector(c(2,5,5,7)))
cachemean(tt<-makeVector(c(2,5,5,7)))
cachemean(tt)
cachemean(tt<-makeVector(c(2,5,5,7)))
xx<- numeric(0)
cachemean(xx)
a <- makeVector(c(1,2,3,4))
a
a$get()
a$getmean()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
a<-makeCacheMatrix(c(2,6,7,8),nrow=4)
a<-makeCacheMatrix(c(2,6,7,8),nrow = 4)
a<-makeCacheMatrix(matrix(c(2,6,7,8),nrow = 4))
a
a$get()
a<-makeCacheMatrix(matrix(c(2,6,7,8),nrow = 2))
a$get()
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(a)
a%x%cacheSolve(a)
a%*%cacheSolve(a)
a.get()%*%cacheSolve(a)
a$get()%*%cacheSolve(a)
source('~/.active-rstudio-document')
source('"cacheMatrix.R")
source("cacheMatrix.R")
getwd()
setwd("~/GitHub/ProgrammingAssignment2")
source("cacheMatrix.R")
a<-makeCacheMatrix(matrix(c(2,6,7,8),nrow = 2))
a
a.get()%*%cacheSolve(a)
a$get()%*%cacheSolve(a)
